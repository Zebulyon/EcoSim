Society:
	- Market
	- Actors
	- Resources
	:
	- RunDay()
	- GetTotalResources()
Market:
	- DailyStock //All posted resources for the day
	+ MarketPriceOfProduct[] //The price of the last sold product
	:
	+ PostResource(ActorID, PostedResource, WantedResource, LowestPriceRatio)
	+ BidResource(ActorID, OfferedResource, WantedResource, HighestPriceRatio)
	- MatchPostBids()
Actors:
	- ActorID
	- CurrentResources[] //Float describing current total resources for each possible resource
	- CurrentProductivity[] //Float describing current productivity in producing each resource
	- Behavior
	:
	+ RunDay()
	- Produce()
	- PostProducts()
	- BidProducts()
	- Consume()
	- Die()
Behavior:
	:
	+ PostResource(Resource, CurrentStock[], CurrentProductivity[], MarketPrice[])
	+ BidResource(Resource, CurrentStock[], CurrentProductivity[], MarketPrice[])

GoalBehavior: //Actor picks an ideal price for a product, always underbids or overbids in order to reach this ideal. Can possibly change ideal price.

TwoPhaseDeterministicMarket(Market): //Actors make post requests and bid requests the market matches the lowest post prices with the highest bid prices and continues in that order.
	:
	+ PostResource(ActorID, PostedResource, WantedResource, LowestPriceRatio)
	+ BidResource(ActorID, OfferedResource, WantedResource, HighestPriceRatio)

TwoPhaseRandomMarket(Market): //Actors make post requests and bid requests the market matches these at random or in some random way
	:
	+ PostResource(ActorID, PostedResource, WantedResource, LowestPriceRatio)
	+ BidResource(ActorID, OfferedResource, WantedResource, HighestPriceRatio)
	
OnePhaseMarket(Market): //Actors make only post requests and then all of the post requests are matched with other post requests
	:
	+ PostResource(ActorID, PostedResource, WantedResource, LowestPriceRatio)

TwoAxisBehavior(Behavior):
	:
	//Randomize for each product a value between 0 and 1. This describes how much of the product you will sell each day.
	//Randomize for each product a value between -0.5 and 0.5 this describes how much variance you sell the products for compared to the market value.
	//These random values could and should be impacted by the current stock of your resources as well as the current production.

Tests:
	

Notes:
	Try having both 1 to 1 productivity and 1 to many productivity where either stone produces only wood or stone produces wood and diamond, and pork etc.

	I want 1 stone for 3 wood or I want 1/3 stone for 1 wood
	I want 4 wood for 1 stone or I want 1 wood for 1/4 stone

	I want 2 wood for 1 stone or I want 1 wood for 1/2 stone

	1 stone to #1 for 2.5 wood for #3
	7/24 stone to #1 for 1 wood to #2


	I want s1 stones for w1 wood
	I want w2 wood for s2 stones

	sr and wr are the results

	w1 / s1 < wr / sr

	s2 / w2 < sr / wr

	w2 / s2 > wr / sr > w1 / s1

	if w1 / s1 < w2 / s2

	
